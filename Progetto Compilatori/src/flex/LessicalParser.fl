/* -------------------- */
/* --- DECLARATION: --- */
/* -------------------- */
/*C segments: */

%{
#include <stdio.h>
#include "pas.tab.h" 
%}

/*Options: */

%option outfile = "LessicalParser.c"
%option noyywrap

/*Regular definitions:*/

digit   [0-9]
number  {digit}{2}
char    [a-z]
CHAR    [A-Z]
agency  ({CHAR}|{char}){char}*
book    {ROOM}[ ]>[ ]{digit}+
SEP0    [ ]-[ ]

/*Regular definitions based on input:*/

DATE    ^(0[1-9]|1[0-2])-{digit}{4}$
SEP1    ^&&&$
ROOM    {CHAR}{char}*
SEP2    ^!!!$
AGENCY  \"({agency})([ ]*({agency}))*\"
AGCODE  {digit}{4}\/{CHAR}{2}
BOOK    \(({book})(;[ ]{book})*\)

/* -------------------------- */
/* --- TRANSLATION RULES: --- */
/* -------------------------- */
%%

{DATE}              {printf("OK %s", yytext);}
{SEP1}              {printf("OK %s", yytext);}
{ROOM}[ ]->         {printf("OK %s", yytext);}
{SEP2}              {printf("OK %s", yytext);}
{AGENCY}{SEP0}      |
{AGCODE}{SEP0}      |
{number}{SEP0}      |
{number}{SEP0}      |
{number}{SEP0}      |
{BOOK}              {printf("OK %s", yytext);}

%%
/* ------------------------------ */
/* --- AUXILIARIES FUNCTIONS: --- */
/* ------------------------------ */

void logger(){
    
}

int main (int argc, char** argv)
{
    --argc; ++argv;
    if(argc > 0){
        yyin = fopen(argv[0], "r");
        //yyout = fopen(argv[1] ,"a");
    }
    else yyin = stdin;
    
    yylex();
    return 0;
}



