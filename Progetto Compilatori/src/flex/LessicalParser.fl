/* -------------------- */
/* --- DECLARATION: --- */
/* -------------------- */
/*C segments: */

%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h> 
#include "../bison/SintaticsParser.tab.h" 
%}

/*Options: */

%option outfile = "LessicalParser.c"
%option noyywrap

/*Regular definitions:*/

digit   [0-9]
number  {digit}+
char    [a-z]
CHAR    [A-Z]
agency  ({CHAR}|{char}){char}*
book    {ROOM}[ ]>[ ]{digit}+

/*Regular definitions based on input:*/

DATE    ^(0[1-9]|1[0-2])-{digit}{4}$
SEP1    ^&&&$
ROOM    {CHAR}{char}*
SEP2    ^!!!$
AGENCY  \"({agency})([ ]*({agency}))*\"
AGCODE  {digit}{4}\/{CHAR}{2}
BOOK    \(({book})(;[ ]{book})*\)

/* -------------------------- */
/* --- TRANSLATION RULES: --- */
/* -------------------------- */
%%

{DATE}              {printf("DATE\n"); return DATE;}
{SEP1}              {printf("SEP1\n"); return SEP1;}
{ROOM}              {printf("ROOM\n"); return ROOM;}
[ ]->[ ]            {printf("ARROW\n"); return ARROW;}
{SEP2}              {printf("SEP2\n"); return SEP2;}
{AGENCY}            {printf("AGENCY\n"); return AGENCY;}
{AGCODE}            {printf("AGENCY_CODE\n"); return AGENCY_CODE;}
{number}            {printf("NUMBER\n"); return NUMBER;}
{BOOK}              {printf("BOOK\n"); return BOOK;}
[ ]-[ ]             {printf("SPACE\n"); return SPACE;}

%%
/* ------------------------------ */
/* --- AUXILIARIES FUNCTIONS: --- */
/* ------------------------------ */


